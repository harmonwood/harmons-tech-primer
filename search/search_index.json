{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Harmon's Tech Primer","text":"<p>This is a place for me to put my own simplified Cheat Sheets and common files pre-customized for my common use cases.</p> <p>Also reminders for myself of how I have done something in the past.</p>"},{"location":"documention/","title":"Getting Started","text":"<p>Mkdocs is currently my favorite documentation medium.</p>"},{"location":"documention/mkdocs/","title":"MkDocs","text":""},{"location":"documention/mkdocs/#links","title":"Links","text":"<ul> <li>MkDocs</li> <li>MkDocs Material</li> <li>MkDocs Material Reference</li> </ul>"},{"location":"documention/mkdocs/#installation","title":"Installation","text":"<pre><code>pip install mkdocs\n</code></pre> <p>I don't bother with anything else as I always use a docker container for MkDocs.</p> <p>Note: If you are using <code>mkdocs gh-deploy</code> you will need to install the \"ADD_MODULES\" locally as well to get gh-deploy to work.</p>"},{"location":"documention/mkdocs/#docker-compose","title":"Docker Compose","text":"docker-compose.yml<pre><code>version: '3.9'\nservices:\nprimer:\nimage: polinux/mkdocs\nenvironment:\nLIVE_RELOAD_SUPPORT: 'true'\nADD_MODULES: 'mkdocs-git-revision-date-localized-plugin mkdocs-material pymdown-extensions pygments'\nFAST_MODE: 'true'\nDOCS_DIRECTORY: '/mkdocs'\nUPDATE_INTERVAL: 15\nAUTO_UPDATE: 'true'\nports:\n- 8000:8000\nvolumes:\n- ./:/mkdocs\n</code></pre> <p>This will mount the current directory as <code>/mkdocs</code> in the container and run MkDocs in fast mode with live reload support. The project directory must have a mkdocs.yml file in it and a docs directory with at least an index.md file in it.</p>"},{"location":"documention/mkdocs/#mkdocsyml","title":"mkdocs.yml","text":"mkdocs.yml<pre><code>site_name: Harmon's Tech Primer\ntheme:\nname: material\npalette:\n- scheme: slate\nprimary: black\naccent: blue\ntoggle:\nicon: material/brightness-4\nname: Switch to light mode\n- scheme: default\nprimary: black\naccent: blue\ntoggle:\nicon: material/brightness-7\nname: Switch to dark mode\nfeatures:\n- content.code.copy\n- content.code.select\n- content.code.annotate\nmarkdown_extensions:\n- pymdownx.highlight:\nanchor_linenums: true\nuse_pygments: true\nauto_title: false\nline_spans: __span\npygments_lang_class: true\n- admonition\n- pymdownx.details\n- pymdownx.superfences:\ncustom_fences:\n- name: mermaid\nclass: mermaid\nformat: !!python/name:pymdownx.superfences.fence_code_format\n</code></pre> <p>This file has Light and Dark mode support as well as Mermaid support. It also has code highlighting support. and Copy and Select support for code blocks.</p>"},{"location":"documention/mkdocs/#deploying-to-github-pages","title":"Deploying to GitHub Pages","text":"<pre><code>mkdocs gh-deploy\n</code></pre> <p>This command will create a special branch gh-pages a nd push the site to it. You can then go to the settings for the repo and set the GitHub Pages source to the gh-pages branch.</p>"},{"location":"git/","title":"README.md","text":"<p>The fastest way to learn git is through practice and visual experience. I run this game about once a year to to keep up on the little things I don't use often. It's a great way to learn the basics and get a feel for how git works.</p> <ul> <li>Learn Git Branching</li> </ul>"},{"location":"git/folder-as-branch/","title":"Folder as Branch","text":""},{"location":"git/folder-as-branch/#creating-the-branch","title":"Creating the branch","text":"<p>The most simple way to do is is to orphan a branch and then delete it's contents, then checkout the folder from the main branch and push.</p> Note <p>Orphaning a branch is a way to create a branch without a history. It is useful for creating a branch that is not related to the main branch.</p> <pre><code>git checkout --orphan branch_name\ngit rm -rf .\n</code></pre>"},{"location":"git/folder-as-branch/#populating-and-publishing-the-branch","title":"Populating and publishing the branch","text":""},{"location":"git/folder-as-branch/#if-the-folder-is-checked-into-the-repo","title":"If the folder is checked into the repo","text":"<pre><code>git checkout main -- folder_name\n</code></pre>"},{"location":"git/folder-as-branch/#if-the-folder-is-git-ignored","title":"If the folder is git ignored","text":"<p>After removing all the files with <code>git rm -rf .</code> The folder will still have the ignored files and folders in it. Remove all that are not the one you want to publish. Then unpack the folder by coping it's contents into the root of the repo.</p> <pre><code>rm random_file_in_gitignore\ncp -r folder_name/* .\nrm -rf folder_name\n</code></pre>"},{"location":"git/folder-as-branch/#dont-forget-to-commit-and-push","title":"Don't forget to commit and push","text":"<pre><code>git add .\ngit commit -m \"Publishing to branch_name\"\ngit push origin branch_name\n</code></pre>"},{"location":"jekyll/","title":"README.md","text":""},{"location":"jekyll/#installation-and-usege","title":"Installation and usege","text":"<p>Jekyll's documentation is awesome. I almost didn't even write this. However, I did want to add a few things that I found useful. Primarily, deploying to GitHub pages.</p> <pre><code>gem install bundler jekyll\njekyll new my-awesome-site\ncd my-awesome-site\nbundle exec jekyll serve\n# =&gt; Now browse to http://localhost:4000 \n</code></pre>"},{"location":"jekyll/#deploying-to-github-pages","title":"Deploying to GitHub Pages","text":"<p>The best way to deploy to GitHub pages is to use a branch called gh-pages. This branch will be used to host the site. The master branch will be used to host the source code. This is a common pattern for GitHub pages.</p> <p>There is a gem to do this for jekyll 3.0 but I was unable to get it to work on 4.x so we will have to do it by hand.</p> <p>Because this is a common pattern outside of jekyll I will reference the git documentation instead. Migrating a folder to a branch in git.</p>"},{"location":"python/environments/","title":"Python Environments","text":""},{"location":"python/environments/#install-a-env-manager-micromambaanacondaetc","title":"Install a env manager micromamba/anaconda/etc...","text":"<p>Currently only in micromamba I will add tabs as needed.</p> <p>https://mamba.readthedocs.io/en/latest/micromamba-installation.html</p>"},{"location":"python/environments/#create-env","title":"Create env","text":"<pre><code>micromamba create -n &lt;env-name&gt; -f environment.yml\n</code></pre>"},{"location":"python/environments/#run-env","title":"Run Env","text":"<pre><code>mircomamba activate &lt;env-name&gt;\n</code></pre>"},{"location":"python/environments/#add-package","title":"Add package","text":"<pre><code>micromamba install &lt;package-name&gt;\n</code></pre>"},{"location":"python/environments/#parsisting-the-envirnoment","title":"Parsisting the envirnoment:","text":"<pre><code>micromamba env export &gt; environment.yml\n</code></pre>"},{"location":"python/environments/#lets-outo-activatedeactivateinstall-the-env-when-changing-directories","title":"Lets outo activate/deactivate/install the env when changing directories","text":"<p>Add this to the ~/.zshrc file (or adapt to your shell)</p> <pre><code>auto_activate_micromamba_env() {\nif [[ -f \"environment.yml\" ]]; then\nlocal env_name=$(grep 'name:' environment.yml | awk '{print $2}')\nif [[ ! -z \"$env_name\" ]]; then\n# Check if the environment exists\nif [[ $(micromamba env list | awk '{print $1}' | grep -w \"^${env_name}$\") == \"\" ]]; then\nmicromamba env create -f environment.yml\n      fi\n# Activate the environment\nmicromamba activate $env_name\nfi\nelse\n# Optionally, deactivate if no environment.yml is found\nmicromamba deactivate\n  fi\n}\n# Add the function to the array of precmds like changing directory\nchpwd_functions+=(\"auto_activate_micromamba_env\")\n# Activate the environment when spawning a new shell\nauto_activate_micromamba_env\n</code></pre> Note <p>Python 2.7.18 install on an M2 Mac (osx-arm64) with micromamba</p> <pre><code>micromamba create -n py27 python=2.7.18 -c http://repo.continuum.io/pkgs/main/osx-arm64\n</code></pre>"},{"location":"python/jupyter/","title":"Jupyter","text":""},{"location":"python/jupyter/#install-jupyter","title":"Install jupyter","text":"<pre><code>micromamba install jupyter\n</code></pre>"},{"location":"python/jupyter/#run-jupyter","title":"Run jupyter","text":"<pre><code>jupyter notebook &amp;\n</code></pre>"},{"location":"ruby/environments/","title":"Ruby Environments","text":""},{"location":"ruby/environments/#install-chruby-and-ruby-install","title":"Install chruby and ruby-install","text":"<pre><code>brew install ruby-install chruby\n</code></pre>"},{"location":"ruby/environments/#modify-zshrc-for-binary-and-auto-switching","title":"Modify zshrc for binary and auto switching","text":"<pre><code>#Add the following to the ~/.bash_profile or ~/.zshrc file:\nsource /opt/homebrew/opt/chruby/share/chruby/chruby.sh\n\n#To enable auto-switching of Rubies specified by .ruby-version files,\n#add the following to ~/.bash_profile or ~/.zshrc:\nsource /opt/homebrew/opt/chruby/share/chruby/auto.sh\n</code></pre>"},{"location":"ruby/environments/#install-latest-ruby","title":"Install latest Ruby","text":"<p>This will install ruby</p> <pre><code>ruby-install --update ruby\n</code></pre> <p>Now to link it add this to your ~/.zshrc file. Remember to change the home and version.</p> <pre><code>export PATH=\"/Users/&lt;home&gt;/.rubies/ruby-&lt;version&gt;/bin:$PATH\"\n</code></pre>"},{"location":"ruby/environments/#start-using-ruby-in-a-project","title":"Start using Ruby in a project","text":"<p>Create a .ruby-version file in the root of your project and add the version you want to use.</p> <p>chruby will now automatically switch to the version in the .ruby-version file when you enter the directory.</p> <pre><code>echo \"ruby-3.2.2\" &gt; .ruby-version\n</code></pre>"},{"location":"ruby/environments/#install-bundler","title":"Install bundler","text":"<pre><code>gem install bundler\n</code></pre>"},{"location":"ruby/environments/#install-gems","title":"Install gems","text":"<pre><code>bundle install\n</code></pre>"}]}