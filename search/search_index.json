{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Harmon's Tech Primer","text":"<p>This is a place for me to put my own simplified Cheat Sheets and common files pre-customized for my common use cases.</p> <p>Also reminders for myself of how I have done something in the past.</p>"},{"location":"documention/","title":"Getting Started","text":"<p>Mkdocs is currently my favorite documentation medium.</p>"},{"location":"documention/mkdocs/","title":"MkDocs","text":""},{"location":"documention/mkdocs/#links","title":"Links","text":"<ul> <li>MkDocs</li> <li>MkDocs Material</li> <li>MkDocs Material Reference</li> </ul>"},{"location":"documention/mkdocs/#installation","title":"Installation","text":"<pre><code>pip install mkdocs\n</code></pre> <p>I don't bother with anything else as I always use a docker container for MkDocs.</p> <p>Note: If you are using <code>mkdocs gh-deploy</code> you will need to install the \"ADD_MODULES\" locally as well to get gh-deploy to work.</p>"},{"location":"documention/mkdocs/#docker-compose","title":"Docker Compose","text":"docker-compose.yml<pre><code>version: '3.9'\nservices:\nprimer:\nimage: polinux/mkdocs\nenvironment:\nLIVE_RELOAD_SUPPORT: 'true'\nADD_MODULES: 'mkdocs-git-revision-date-localized-plugin mkdocs-material pymdown-extensions pygments'\nFAST_MODE: 'true'\nDOCS_DIRECTORY: '/mkdocs'\nUPDATE_INTERVAL: 15\nAUTO_UPDATE: 'true'\nports:\n- 8000:8000\nvolumes:\n- ./:/mkdocs\n</code></pre> <p>This will mount the current directory as <code>/mkdocs</code> in the container and run MkDocs in fast mode with live reload support. The project directory must have a mkdocs.yml file in it and a docs directory with at least an index.md file in it.</p>"},{"location":"documention/mkdocs/#mkdocsyml","title":"mkdocs.yml","text":"mkdocs.yml<pre><code>site_name: Harmon's Tech Primer\ntheme:\nname: material\npalette:\n- scheme: slate\nprimary: black\naccent: blue\ntoggle:\nicon: material/brightness-4\nname: Switch to light mode\n- scheme: default\nprimary: black\naccent: blue\ntoggle:\nicon: material/brightness-7\nname: Switch to dark mode\nfeatures:\n- content.code.copy\n- content.code.select\n- content.code.annotate\nmarkdown_extensions:\n- pymdownx.highlight:\nanchor_linenums: true\nuse_pygments: true\nauto_title: false\nline_spans: __span\npygments_lang_class: true\n- pymdownx.superfences:\ncustom_fences:\n- name: mermaid\nclass: mermaid\nformat: !!python/name:pymdownx.superfences.fence_code_format\n</code></pre> <p>This file has Light and Dark mode support as well as Mermaid support. It also has code highlighting support. and Copy and Select support for code blocks.</p>"},{"location":"documention/mkdocs/#deploying-to-github-pages","title":"Deploying to GitHub Pages","text":"<pre><code>mkdocs gh-deploy\n</code></pre> <p>This command will create a special branch gh-pages a nd push the site to it. You can then go to the settings for the repo and set the GitHub Pages source to the gh-pages branch.</p>"},{"location":"python/environments/","title":"Python Environments","text":""},{"location":"python/environments/#install-a-env-manager-micromambaanacondaetc","title":"Install a env manager micromamba/anaconda/etc...","text":"<p>Currently only in micromamba I will add tabs as needed.</p> <p>https://mamba.readthedocs.io/en/latest/micromamba-installation.html</p>"},{"location":"python/environments/#create-env","title":"Create env","text":"<pre><code>micromamba create -n my-first-jupyter -f environment.yml\n</code></pre>"},{"location":"python/environments/#run-env","title":"Run Env","text":"<pre><code>mircomamba activate my-first-jupyter\n</code></pre>"},{"location":"python/environments/#add-package","title":"Add package","text":"<pre><code>micromamba install &lt;package-name&gt;\n</code></pre>"},{"location":"python/environments/#parsisting-the-envirnoment","title":"Parsisting the envirnoment:","text":"<pre><code>micromamba env export &gt; environment.yml\n</code></pre>"},{"location":"python/environments/#lets-outo-activatedeactivateinstall-the-env-when-changing-directories","title":"Lets outo activate/deactivate/install the env when changing directories","text":"<p>Add this to the ~/.zshrc file (or adapt to your shell)</p> <pre><code>auto_activate_micromamba_env() {\nif [[ -f \"environment.yml\" ]]; then\nlocal env_name=$(grep 'name:' environment.yml | awk '{print $2}')\nif [[ ! -z \"$env_name\" ]]; then\n# Check if the environment exists\nif [[ $(micromamba env list | awk '{print $1}' | grep -w \"^${env_name}$\") == \"\" ]]; then\nmicromamba env create -f environment.yml\n      fi\n# Activate the environment\nmicromamba activate $env_name\nfi\nelse\n# Optionally, deactivate if no environment.yml is found\nmicromamba deactivate\n  fi\n}\n# Add the function to the array of precmds like changing directory\nchpwd_functions+=(\"auto_activate_micromamba_env\")\n# Activate the environment when spawning a new shell\nauto_activate_micromamba_env\n</code></pre>"},{"location":"python/jupyter/","title":"Jupyter","text":""},{"location":"python/jupyter/#install-jupyter","title":"Install jupyter","text":"<pre><code>micromamba install jupyter\n</code></pre>"},{"location":"python/jupyter/#run-jupyter","title":"Run jupyter","text":"<pre><code>jupyter notebook &amp;\n</code></pre>"},{"location":"ruby/environments/","title":"Ruby Environments","text":""},{"location":"ruby/environments/#install-chruby-and-ruby-install","title":"Install chruby and ruby-install","text":"<pre><code>brew install ruby-install chruby\n</code></pre>"},{"location":"ruby/environments/#modify-zshrc-for-binary-and-auto-switching","title":"Modify zshrc for binary and auto switching","text":"<pre><code>#Add the following to the ~/.bash_profile or ~/.zshrc file:\nsource /opt/homebrew/opt/chruby/share/chruby/chruby.sh\n\n#To enable auto-switching of Rubies specified by .ruby-version files,\n#add the following to ~/.bash_profile or ~/.zshrc:\nsource /opt/homebrew/opt/chruby/share/chruby/auto.sh\n</code></pre>"},{"location":"ruby/environments/#install-latest-ruby","title":"Install latest Ruby","text":"<p>This will install ruby</p> <pre><code>ruby-install --update ruby\n</code></pre> <p>Now to link it add this to your ~/.zshrc file. Remember to change the home and version.</p> <pre><code>export PATH=\"/Users/&lt;home&gt;/.rubies/ruby-&lt;version&gt;/bin:$PATH\"\n</code></pre>"},{"location":"ruby/environments/#start-using-ruby-in-a-project","title":"Start using Ruby in a project","text":"<p>Create a .ruby-version file in the root of your project and add the version you want to use.</p> <p>chruby will now automaticly switch to the version in the .ruby-version file when you enter the directory.</p> <pre><code>echo \"ruby-2.7.4\" &gt; .ruby-version\n</code></pre>"},{"location":"ruby/environments/#install-bundler","title":"Install bundler","text":"<pre><code>gem install bundler\n</code></pre>"},{"location":"ruby/environments/#install-gems","title":"Install gems","text":"<pre><code>bundle install\n</code></pre>"}]}